class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        // Create a dummy node to act as the starting point for the merged list
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;  // This will track the last node of the merged list

        // Traverse through both lists until one is empty
        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                current.next = list1;  // Attach the node from list1
                list1 = list1.next;  // Move list1 pointer to the next node
            } else {
                current.next = list2;  // Attach the node from list2
                list2 = list2.next;  // Move list2 pointer to the next node
            }
            current = current.next;  // Move the current pointer to the newly added node
        }

        // If there are any remaining nodes in list1 or list2, append them
        if (list1 != null) {
            current.next = list1;
        }
        if (list2 != null) {
            current.next = list2;
        }

        // Return the merged list starting from dummy.next (skip the dummy node)
        return dummy.next;
    }
}








21. Merge Two Sorted Lists
Solved
Easy
Topics
Companies
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 

Example 1:


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.
